Changelog 08/04:

Dialogue and Quests:

The quest & dialogue logic ended up being a bit more complicated than I thought.
It's actually much simpler than the diagram suggests, lots of atomic choices and interactions.

[DIAGRAM]

I realized that there were two types of interactions with a NPC:
-NPC has quests to give
-NPC doesn't have any quests to give 

In the future, there may be trading and other interactions, but I am limiting the scope for now.

The user should see the dialogue in the box, and be able to navigate through it (back and forth)
For a quest, the right dialogue should be loaded, and the end of the dialogue should give the user a choice: accept or decline the quest.

[DIALOGUE UI BOXES]

This is the basic logic I started with.


Dialogue Logic:

I wanted to create the minimal amount of classes/variables to handle the dialogue/quest dialogue logic.
I defined a Dialogue as
-A list of text
-A length
-An index pointing to the current text.

For the quest dialogue I realized:
Depending on the stage of the quest you are at, the dialogue displayed should be different.

-Is the NPC about to give out the quest?
-Is the player in the process of completing the quest, but went back to talk to the NPC again?
-Has the quest been completed, and is a reward/completion expected?

I created a QuestDialogue as a dictionary of Dialogues with 3 keys (for now)
-initialization
-waiting
-completion

Each dialogue can be as long as needed, so this is not capped to just a single message.
In the future, the dict can be extended with additional keys, or the structure can be changed, depending on what is better.

Here are the modified data structures:

[DATA structures]





Getting the right quest:

When a NPC is clicked, the first check is to see if they have a quest to give.
The QuestManager has been created for that:
-Handling the retrieval of the right quest
-Handling the completion of quests

If the NPC has no quest, we just return None.


Getting the right dialogue:

When clicking a NPC, we also have to get the right set of dialogues.

I created the DialogueManager to handle all of that logic.

For now, the scenario gives any NPC a certain list of dialogues.
I also added some "generic dialogue" so that I don't have to set dialogue for every single NPC.

Assuming the NPC doesn't have any quests:
If they have dialogue, we return a random dialogue.
If they don't, we return a random generic dialogue.

If the NPC has a quest, we'll have to retrieve the right dialogue associated with that quest.
First we have to get the QuestDialogue.
Then check if the character already has the quest.
Then check if it is completed or not already.
That gives us the state of the quest, which allows retrieval of the right quest dialogue.

[FIRST PART OF THE DIAGRAM]


Displaying and handling the dialogue:

After that, the DialogueController handles the dialogue by using a DialogueBox.

It gets the index and length of the dialogue, and depending on these, it displays the previous or next buttons.
In the case of a quest, it waits for the last piece of dialogue to display the accept/decline buttons.

[SECOND PART OF THE DIAGRAM]

While the dialogue is showing, the controller handles all the events.
-X closes the dialogue
-prev/next go back/forward in the dialogue
-accept/decline/end quests are handled with a return code that is passed back to the WorldController

[THIRD PART]

There, the QuestManager is used to take care of the completion of quests.

[FOURTH PART]

It has a dictionary of "current_quests" indexed by NPC: that allows to handle multiple ongoing quests at once.
I used to have a single "current_quest" but quickly realized the limitations.
It uses the current_npc attribute to know who the character is talking to, get the right quest, and end the quest.

The actual "completion" of the quest happens when the objectives are done.
The "ending" of the quest happens when the player finishes the completion dialogue with the NPC.
For this, I added the "ended" boolean to the quest.

Right now, I decided to keep it simple, and only one simultaneous quest per NPC is handled.



I summarized how objects interact with each other during the building and playing phase.

[BUILD PHASE]

[GAME PHASE]



I will have to rework the reset buttons, and start thinking about more "meta" concepts of the game, but I want to get basic LLMs in before I start adding too much complexity to the game.

Next priorities:
Before going further, I want to take time to refactor the code and track any illogical behaviors, or things that could disrupt the spatial or temporal continuity of the game.
In the future, LLMs wil generate simple quests, then possibly, series of quests.
There will have to be some way of representing and handling time and space to feed that as context to the LLM.
The reset logic has to be flawless (no duplicated entities, no re-initialization quirks...)

The LLM will operate in the "Building" phase, so it is important for the game to be able to be built as it is being played.
If a LLM generates a scenario, that scenario should be loaded without having to restart the game.
If new quests are added, they should also be loaded seamlessly, and integrate correctly into the game logic.



Demo:
Showing the UI modifications
Going through the quest lifecycle
Showing reset
Addressing some bugs







